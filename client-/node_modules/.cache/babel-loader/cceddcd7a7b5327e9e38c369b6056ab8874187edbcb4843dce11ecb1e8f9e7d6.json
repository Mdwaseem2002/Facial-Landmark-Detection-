{"ast":null,"code":"document.addEventListener('DOMContentLoaded', function () {\n  // Assuming you have a form with id 'myForm' in your HTML\n  var form = document.getElementById('myForm');\n  form.addEventListener('submit', function (event) {\n    event.preventDefault(); // Prevent the default form submission\n\n    // Collect form data\n    var formData = new FormData(form);\n    var jsonData = {};\n\n    // Convert FormData to JSON\n    formData.forEach(function (value, key) {\n      jsonData[key] = value;\n    });\n\n    // Send data to the server\n    fetch('/save', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(jsonData)\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to submit form');\n      }\n      return response.json();\n    }).then(data => {\n      console.log(data.message); // Log the server response\n      // You can do additional actions here based on the server response\n    }).catch(error => {\n      console.error('Error:', error);\n      // Handle errors here\n    });\n  });\n});","map":{"version":3,"names":["document","addEventListener","form","getElementById","event","preventDefault","formData","FormData","jsonData","forEach","value","key","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","json","data","console","log","message","catch","error"],"sources":["/home/waseem/experiments/waseem-example-fullstack/client-/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <h1>WELCOME TO OUR PAGE</h1>\n\n    <!-- Form to submit data -->\n    <div class=\"form-wrapper\">\n      <form @submit.prevent=\"submitForm\">\n        <div class=\"input-group\">\n          <label for=\"name\">Name:</label>\n          <input type=\"text\" id=\"name\" v-model=\"formData.name\" required class=\"gray-input\">\n        </div>\n        <div class=\"input-group\">\n          <label for=\"email\">Email:</label>\n          <input type=\"email\" id=\"email\" v-model=\"formData.email\" required class=\"gray-input\">\n        </div>\n        <div class=\"input-group\">\n          <label for=\"password\">Password:</label>\n          <input type=\"password\" id=\"password\" v-model=\"formData.password\" required class=\"gray-input\">\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n\n    <!-- Get button to fetch existing data -->\n    <button @click=\"fetchExistingData\">Get</button>\n\n    <h2>Existing Data</h2>\n    <div id=\"existingData\">\n      <ul v-if=\"existingData && existingData.length > 0\">\n        <li v-for=\"(data, index) in existingData\" :key=\"index\">\n          Name: {{ data.name }}, Email: {{ data.email }}, Password: {{ data.password }}\n        </li>\n      </ul>\n      <p v-else>No existing data found.</p>\n    </div>\n\n    <!-- Display current time -->\n    <div class=\"time\">{{ currentTime }}</div>\n  </div>\n</template>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Assuming you have a form with id 'myForm' in your HTML\n    var form = document.getElementById('myForm');\n\n    form.addEventListener('submit', function(event) {\n        event.preventDefault(); // Prevent the default form submission\n\n        // Collect form data\n        var formData = new FormData(form);\n        var jsonData = {};\n\n        // Convert FormData to JSON\n        formData.forEach(function(value, key) {\n            jsonData[key] = value;\n        });\n\n        // Send data to the server\n        fetch('/save', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(jsonData)\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Failed to submit form');\n            }\n            return response.json();\n        })\n        .then(data => {\n            console.log(data.message); // Log the server response\n            // You can do additional actions here based on the server response\n        })\n        .catch(error => {\n            console.error('Error:', error);\n            // Handle errors here\n        });\n    });\n});\n\n</script>\n\n<style scoped>\n.container {\n  text-align: center;\n  background-color: lightblue; /* Change background color to light green */\n}\n\n.form-wrapper {\n  margin-top: 20px;\n}\n\n.input-group {\n  margin-bottom: 10px;\n}\n\n.input-group label {\n  display: block;\n  margin-bottom: 5px;\n  width: 2000px; /* Adjust width as needed */\n}\n\n.input-group input {\n  width: 250px; /* Adjust width as needed */\n  padding: 5px;\n  margin-bottom: 5px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}\n\n.gray-input {\n  color: rgb(245, 108, 108);\n}\n\nbutton {\n  margin-top: 10px;\n}\n\n.time {\n  margin-top: 20px;\n  font-size: 24px;\n}\n</style>"],"mappings":"AA0CAA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAW;EACrD;EACA,IAAIC,IAAG,GAAIF,QAAQ,CAACG,cAAc,CAAC,QAAQ,CAAC;EAE5CD,IAAI,CAACD,gBAAgB,CAAC,QAAQ,EAAE,UAASG,KAAK,EAAE;IAC5CA,KAAK,CAACC,cAAc,CAAC,CAAC,EAAE;;IAExB;IACA,IAAIC,QAAO,GAAI,IAAIC,QAAQ,CAACL,IAAI,CAAC;IACjC,IAAIM,QAAO,GAAI,CAAC,CAAC;;IAEjB;IACAF,QAAQ,CAACG,OAAO,CAAC,UAASC,KAAK,EAAEC,GAAG,EAAE;MAClCH,QAAQ,CAACG,GAAG,IAAID,KAAK;IACzB,CAAC,CAAC;;IAEF;IACAE,KAAK,CAAC,OAAO,EAAE;MACXC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ;IACjC,CAAC,EACAU,IAAI,CAACC,QAAO,IAAK;MACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC5C;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC1B,CAAC,EACAJ,IAAI,CAACK,IAAG,IAAK;MACVC,OAAO,CAACC,GAAG,CAACF,IAAI,CAACG,OAAO,CAAC,EAAE;MAC3B;IACJ,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;MACZJ,OAAO,CAACI,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9B;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;AACN,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}