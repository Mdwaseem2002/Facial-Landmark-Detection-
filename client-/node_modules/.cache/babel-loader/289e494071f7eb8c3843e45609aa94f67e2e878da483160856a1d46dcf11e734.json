{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nexport default {\n  data() {\n    return {\n      file: null,\n      uploadedImage: null,\n      detectedImage: null\n    };\n  },\n  methods: {\n    handleFileChange(event) {\n      this.file = event.target.files[0];\n    },\n    async uploadFile() {\n      if (!this.file) {\n        alert(\"Please select a file to upload.\");\n        return;\n      }\n      const reader = new FileReader();\n      reader.onload = () => {\n        const base64String = reader.result.split(',')[1]; // Extract base64 string\n        this.uploadImage(base64String);\n      };\n      reader.readAsDataURL(this.file);\n    },\n    async uploadImage(base64String) {\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/process_image\", {\n          method: \"POST\",\n          body: JSON.stringify({\n            image: base64String\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          this.uploadedImage = data.processedImage;\n          alert(\"File uploaded and processed successfully!\");\n        } else {\n          alert(\"Failed to upload and process file.\");\n        }\n      } catch (error) {\n        console.error(\"Error uploading and processing file:\", error);\n        alert(\"An error occurred while uploading and processing the file.\");\n      }\n    },\n    async detectFacialLandmarks() {\n      if (!this.uploadedImage) {\n        alert(\"Please upload and process an image first.\");\n        return;\n      }\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/get_processed_image\", {\n          method: \"GET\"\n        });\n        if (response.ok) {\n          const blob = await response.blob();\n          const imageUrl = URL.createObjectURL(blob);\n          this.detectedImage = imageUrl;\n          alert(\"Facial landmarks detected successfully!\");\n        } else {\n          alert(\"Failed to detect facial landmarks.\");\n        }\n      } catch (error) {\n        console.error(\"Error detecting facial landmarks:\", error);\n        alert(\"An error occurred while detecting facial landmarks.\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","file","uploadedImage","detectedImage","methods","handleFileChange","event","target","files","uploadFile","alert","reader","FileReader","onload","base64String","result","split","uploadImage","readAsDataURL","response","fetch","method","body","JSON","stringify","image","headers","ok","json","processedImage","error","console","detectFacialLandmarks","blob","imageUrl","URL","createObjectURL"],"sources":["/home/waseem/project/client-/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <h1>Image with Face Landmark Detection</h1>\n    <div>\n      <input type=\"file\" @change=\"handleFileChange\" accept=\".jpg, .jpeg, .png\" />\n      <button @click=\"uploadFile\">Upload</button>\n    </div>\n    <div v-if=\"uploadedImage\">\n      <h2>Uploaded Image:</h2>\n      <img :src=\"uploadedImage\" alt=\"Uploaded Image\" />\n      <br>\n      <button @click=\"detectFacialLandmarks\">Detect Landmarks</button>\n    </div>\n    <div v-if=\"detectedImage\">\n      <h2>Detected Landmarks:</h2>\n      <img :src=\"detectedImage\" alt=\"Detected Image\" />\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      file: null,\n      uploadedImage: null,\n      detectedImage: null,\n    };\n  },\n  methods: {\n    handleFileChange(event) {\n      this.file = event.target.files[0];\n    },\n    async uploadFile() {\n      if (!this.file) {\n        alert(\"Please select a file to upload.\");\n        return;\n      }\n\n      const reader = new FileReader();\n      reader.onload = () => {\n        const base64String = reader.result.split(',')[1]; // Extract base64 string\n        this.uploadImage(base64String);\n      };\n      reader.readAsDataURL(this.file);\n    },\n    async uploadImage(base64String) {\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/process_image\", {\n          method: \"POST\",\n          body: JSON.stringify({ image: base64String }),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          this.uploadedImage = data.processedImage;\n          alert(\"File uploaded and processed successfully!\");\n        } else {\n          alert(\"Failed to upload and process file.\");\n        }\n      } catch (error) {\n        console.error(\"Error uploading and processing file:\", error);\n        alert(\"An error occurred while uploading and processing the file.\");\n      }\n    },\n    async detectFacialLandmarks() {\n      if (!this.uploadedImage) {\n        alert(\"Please upload and process an image first.\");\n        return;\n      }\n\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/get_processed_image\", {\n          method: \"GET\",\n        });\n\n        if (response.ok) {\n          const blob = await response.blob();\n          const imageUrl = URL.createObjectURL(blob);\n          this.detectedImage = imageUrl;\n          alert(\"Facial landmarks detected successfully!\");\n        } else {\n          alert(\"Failed to detect facial landmarks.\");\n        }\n      } catch (error) {\n        console.error(\"Error detecting facial landmarks:\", error);\n        alert(\"An error occurred while detecting facial landmarks.\");\n      }\n    },\n  },\n};\n</script>\n"],"mappings":";;;AAqBA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,IAAI;MACVC,aAAa,EAAE,IAAI;MACnBC,aAAa,EAAE;IACjB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,gBAAgBA,CAACC,KAAK,EAAE;MACtB,IAAI,CAACL,IAAG,GAAIK,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACnC,CAAC;IACD,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI,CAAC,IAAI,CAACR,IAAI,EAAE;QACdS,KAAK,CAAC,iCAAiC,CAAC;QACxC;MACF;MAEA,MAAMC,MAAK,GAAI,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAK,GAAI,MAAM;QACpB,MAAMC,YAAW,GAAIH,MAAM,CAACI,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;QAClD,IAAI,CAACC,WAAW,CAACH,YAAY,CAAC;MAChC,CAAC;MACDH,MAAM,CAACO,aAAa,CAAC,IAAI,CAACjB,IAAI,CAAC;IACjC,CAAC;IACD,MAAMgB,WAAWA,CAACH,YAAY,EAAE;MAC9B,IAAI;QACF,MAAMK,QAAO,GAAI,MAAMC,KAAK,CAAC,qCAAqC,EAAE;UAClEC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,KAAK,EAAEX;UAAa,CAAC,CAAC;UAC7CY,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB;QAChD,CAAC,CAAC;QAEF,IAAIP,QAAQ,CAACQ,EAAE,EAAE;UACf,MAAM3B,IAAG,GAAI,MAAMmB,QAAQ,CAACS,IAAI,CAAC,CAAC;UAClC,IAAI,CAAC1B,aAAY,GAAIF,IAAI,CAAC6B,cAAc;UACxCnB,KAAK,CAAC,2CAA2C,CAAC;QACpD,OAAO;UACLA,KAAK,CAAC,oCAAoC,CAAC;QAC7C;MACF,EAAE,OAAOoB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;QAC5DpB,KAAK,CAAC,4DAA4D,CAAC;MACrE;IACF,CAAC;IACD,MAAMsB,qBAAqBA,CAAA,EAAG;MAC5B,IAAI,CAAC,IAAI,CAAC9B,aAAa,EAAE;QACvBQ,KAAK,CAAC,2CAA2C,CAAC;QAClD;MACF;MAEA,IAAI;QACF,MAAMS,QAAO,GAAI,MAAMC,KAAK,CAAC,2CAA2C,EAAE;UACxEC,MAAM,EAAE;QACV,CAAC,CAAC;QAEF,IAAIF,QAAQ,CAACQ,EAAE,EAAE;UACf,MAAMM,IAAG,GAAI,MAAMd,QAAQ,CAACc,IAAI,CAAC,CAAC;UAClC,MAAMC,QAAO,GAAIC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;UAC1C,IAAI,CAAC9B,aAAY,GAAI+B,QAAQ;UAC7BxB,KAAK,CAAC,yCAAyC,CAAC;QAClD,OAAO;UACLA,KAAK,CAAC,oCAAoC,CAAC;QAC7C;MACF,EAAE,OAAOoB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;QACzDpB,KAAK,CAAC,qDAAqD,CAAC;MAC9D;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}