{"ast":null,"code":"import { createElementVNode as _createElementVNode, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createStaticVNode(\"<h1>User Data Form</h1><form id=\\\"userDataForm\\\"><label for=\\\"name\\\">Name:</label><input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" required><br><br><label for=\\\"email\\\">Email:</label><input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" required><br><br><label for=\\\"password\\\">Password:</label><input type=\\\"password\\\" id=\\\"password\\\" name=\\\"password\\\" required><br><br><button type=\\\"submit\\\">Submit</button></form><h2>Existing Data</h2><ul id=\\\"existingData\\\"></ul>\", 4);\nconst _hoisted_5 = [_hoisted_1];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [..._hoisted_5]);\n}","map":{"version":3,"names":["_createStaticVNode","_hoisted_1","_createElementBlock","_hoisted_5"],"sources":["/home/waseem/experiments/waseem-example-fullstack/client-/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>User Data Form</h1>\n    <form id=\"userDataForm\">\n      <label for=\"name\">Name:</label>\n      <input type=\"text\" id=\"name\" name=\"name\" required><br><br>\n      \n      <label for=\"email\">Email:</label>\n      <input type=\"email\" id=\"email\" name=\"email\" required><br><br>\n      \n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" name=\"password\" required><br><br>\n      \n      <button type=\"submit\">Submit</button>\n    </form>\n\n    <h2>Existing Data</h2>\n    <ul id=\"existingData\"></ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  mounted() {\n    // Function to fetch existing data from the server and display it\n    async function fetchAndDisplayData() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/get_data');\n        if (response.ok) {\n          const data = await response.json();\n          const existingDataList = document.getElementById('existingData');\n          existingDataList.innerHTML = '';\n          data.forEach(item => {\n            const listItem = document.createElement('li');\n            listItem.textContent = `Name: ${item.name}, Email: ${item.email}, Password: ${item.password}`;\n            existingDataList.appendChild(listItem);\n          });\n        } else {\n          console.error('Failed to fetch existing data:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n\n    // Add event listener to form submission\n    document.getElementById('userDataForm').addEventListener('submit', async (event) => {\n      event.preventDefault(); // Prevent form submission\n\n      const formData = new FormData(event.target);\n      const userData = {\n        name: formData.get('name'),\n        email: formData.get('email'),\n        password: formData.get('password')\n      };\n\n      try {\n        const response = await fetch('http://127.0.0.1:5000/save', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(userData)\n        });\n        if (response.ok) {\n          const responseData = await response.json();\n          alert(responseData.message);\n          // Fetch and display existing data after successful form submission\n          fetchAndDisplayData();\n        } else {\n          console.error('Failed to submit form:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    });\n\n    // Fetch and display existing data when the component is mounted\n    fetchAndDisplayData();\n\n    // Resize event listener\n    window.addEventListener('resize', this.onResize);\n  },\n  methods: {\n    onResize() {\n      var element = document.getElementById('someElementId');\n      if (element !== null) {\n          // Manipulate element properties here\n          element.classList.add('someClass');\n      }\n    }\n  }\n}\n</script>\n\n<style>\n/* Add any component-specific styles here */\n</style>\n"],"mappings":";gCAAAA,kBAAA;oBAEIC,UAAuB,C;;uBADzBC,mBAAA,CAiBM,aAlBR,IAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}