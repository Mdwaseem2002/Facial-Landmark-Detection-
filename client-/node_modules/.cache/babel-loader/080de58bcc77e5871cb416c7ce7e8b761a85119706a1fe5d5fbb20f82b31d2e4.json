{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      imageUrl: null,\n      apiBaseUrl: 'http://127.0.0.1:5000',\n      // Replace with your Flask API URL\n      isLoading: false,\n      processedImage: null\n    };\n  },\n  methods: {\n    uploadImage(event) {\n      const file = event.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = e => {\n          this.imageUrl = e.target.result; // Display preview \n        };\n        reader.readAsDataURL(file);\n      }\n    },\n    async processImage() {\n      if (!this.imageUrl) return;\n      try {\n        const imageData = this.imageUrl.split(',')[1]; // Get base64 data (exclude header)\n        const response = await axios.post(`${this.apiBaseUrl}/process`, {\n          image: imageData\n        });\n        if (response.status === 200) {\n          console.log(\"Image sent for processing successfully\");\n        } else {\n          console.error(\"Unexpected status code from /process:\", response.status);\n        }\n        this.isLoading = true;\n        const getResponse = await axios.get(`${this.apiBaseUrl}/processed`);\n        if (getResponse.data && getResponse.data.image) {\n          console.log(\"Processed image received successfully\");\n          this.processedImage = 'data:image/jpeg;base64,' + getResponse.data.image; // 'data:image/jpeg;base64,....\n        } else {\n          console.error(\"Unexpected response from /processed:\", getResponse.data);\n        }\n      } catch (error) {\n        console.error(\"Image processing error:\", error);\n        // Handle the error, e.g., display an error message\n      } finally {\n        this.isLoading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","imageUrl","apiBaseUrl","isLoading","processedImage","methods","uploadImage","event","file","target","files","reader","FileReader","onload","e","result","readAsDataURL","processImage","imageData","split","response","post","image","status","console","log","error","getResponse","get"],"sources":["/home/waseem/project/facial/client-/src/components/ImageProcessor.vue"],"sourcesContent":["<template>\n    <div id=\"app\">\n      <header class=\"app-header\">\n        <h1>Facial Analysis</h1>\n      </header>\n      <div class=\"button\"><button @click=\"processImage\">Process Image</button></div> \n    <div class=\"container\">\n      <div class=\"left-section\">\n        <h2>Upload Image</h2>\n        <input type=\"file\" @change=\"uploadImage\" ref=\"fileInput\" />\n        \n        <div class=\"preview\" v-if=\"imageUrl\">\n          <img :src=\"imageUrl\" alt=\"Uploaded Image\">\n        </div>\n      </div>\n      \n      \n      <div class=\"right-section\" v-if=\"processedImage\">\n        <h2>Processed Image</h2>\n        <div v-if=\"isLoading\">Loading...</div>\n        <img class=\"processedImage\" v-if=\"processedImage\" :src=\"processedImage\" alt=\"Processed Image\" />\n      </div>\n    </div>\n    <div>\n      <footer class=\"app-footer\">\n        <p>Powered by <a href=\"Develop in 2024 \">Team </a></p>\n      </footer>\n    </div>\n  </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    data() {\n      return {\n        imageUrl: null,\n        apiBaseUrl: 'http://127.0.0.1:5000', // Replace with your Flask API URL\n        isLoading: false,\n        processedImage: null,\n      };\n    },\n    methods: {\n      uploadImage(event) {\n        const file = event.target.files[0];\n  \n        if (file) {\n          const reader = new FileReader();\n          reader.onload = (e) => {\n            this.imageUrl = e.target.result; // Display preview \n          };\n          reader.readAsDataURL(file);\n        }\n      },\n      async processImage() {\n        if (!this.imageUrl) return;\n  \n        try {\n          const imageData = this.imageUrl.split(',')[1]; // Get base64 data (exclude header)\n          const response = await axios.post(`${this.apiBaseUrl}/process`, { image: imageData });\n  \n          if (response.status === 200) {\n            console.log(\"Image sent for processing successfully\");\n          } else {\n            console.error(\"Unexpected status code from /process:\", response.status);\n          }\n  \n          this.isLoading = true;\n          const getResponse = await axios.get(`${this.apiBaseUrl}/processed`);\n  \n          if (getResponse.data && getResponse.data.image) {\n            console.log(\"Processed image received successfully\");\n            this.processedImage = 'data:image/jpeg;base64,' + getResponse.data.image; // 'data:image/jpeg;base64,....\n  \n          } else {\n            console.error(\"Unexpected response from /processed:\", getResponse.data);\n          }\n  \n        } catch (error) {\n          console.error(\"Image processing error:\", error);\n          // Handle the error, e.g., display an error message\n        } finally {\n          this.isLoading = false;\n        }\n      }\n    },\n  };\n  </script>\n  \n  <style>\n  /* Add basic styling for layout */\n  .app-header {\n    text-align: center;\n    background-color: lightblue; /* Change background color to light blue */\n  }\n  .container {\n    display: flex;\n  }\n  .left-section, .right-section {\n    width: 50%;\n    padding: 20px;\n    border: 1px solid #000;\n  \n  }\n  .preview img, .right-section img {\n    max-width: 100%;\n    border: 1px solid #000;\n  }\n  .app-footer {\n    text-align: center;\n    margin-top: 20px;\n  }\n  .button {\n    text-align: center;\n    margin-top: 20px;\n  }\n  .processedImage {\n    padding-top: 20px;\n    max-width: 100%;\n    /* border: 1px solid #000; */\n  }\n  </style>"],"mappings":"AAgCE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE,uBAAuB;MAAE;MACrCC,SAAS,EAAE,KAAK;MAChBC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,WAAWA,CAACC,KAAK,EAAE;MACjB,MAAMC,IAAG,GAAID,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAElC,IAAIF,IAAI,EAAE;QACR,MAAMG,MAAK,GAAI,IAAIC,UAAU,CAAC,CAAC;QAC/BD,MAAM,CAACE,MAAK,GAAKC,CAAC,IAAK;UACrB,IAAI,CAACb,QAAO,GAAIa,CAAC,CAACL,MAAM,CAACM,MAAM,EAAE;QACnC,CAAC;QACDJ,MAAM,CAACK,aAAa,CAACR,IAAI,CAAC;MAC5B;IACF,CAAC;IACD,MAAMS,YAAYA,CAAA,EAAG;MACnB,IAAI,CAAC,IAAI,CAAChB,QAAQ,EAAE;MAEpB,IAAI;QACF,MAAMiB,SAAQ,GAAI,IAAI,CAACjB,QAAQ,CAACkB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;QAC/C,MAAMC,QAAO,GAAI,MAAMrB,KAAK,CAACsB,IAAI,CAAE,GAAE,IAAI,CAACnB,UAAW,UAAS,EAAE;UAAEoB,KAAK,EAAEJ;QAAU,CAAC,CAAC;QAErF,IAAIE,QAAQ,CAACG,MAAK,KAAM,GAAG,EAAE;UAC3BC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;QACvD,OAAO;UACLD,OAAO,CAACE,KAAK,CAAC,uCAAuC,EAAEN,QAAQ,CAACG,MAAM,CAAC;QACzE;QAEA,IAAI,CAACpB,SAAQ,GAAI,IAAI;QACrB,MAAMwB,WAAU,GAAI,MAAM5B,KAAK,CAAC6B,GAAG,CAAE,GAAE,IAAI,CAAC1B,UAAW,YAAW,CAAC;QAEnE,IAAIyB,WAAW,CAAC3B,IAAG,IAAK2B,WAAW,CAAC3B,IAAI,CAACsB,KAAK,EAAE;UAC9CE,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;UACpD,IAAI,CAACrB,cAAa,GAAI,yBAAwB,GAAIuB,WAAW,CAAC3B,IAAI,CAACsB,KAAK,EAAE;QAE5E,OAAO;UACLE,OAAO,CAACE,KAAK,CAAC,sCAAsC,EAAEC,WAAW,CAAC3B,IAAI,CAAC;QACzE;MAEF,EAAE,OAAO0B,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C;MACF,UAAU;QACR,IAAI,CAACvB,SAAQ,GAAI,KAAK;MACxB;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}