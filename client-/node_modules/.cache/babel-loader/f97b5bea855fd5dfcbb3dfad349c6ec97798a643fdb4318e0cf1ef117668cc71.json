{"ast":null,"code":"export default {\n  data() {\n    return {\n      formData: {\n        name: '',\n        email: '',\n        password: ''\n      },\n      existingData: []\n    };\n  },\n  methods: {\n    async submitForm() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/save', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(this.formData)\n        });\n        const responseData = await response.json();\n        alert(responseData.message); // Show response message\n\n        // Clear form fields after submission\n        this.formData.name = '';\n        this.formData.email = '';\n        this.formData.password = '';\n\n        // Fetch and display existing data\n        this.fetchExistingData();\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    },\n    async fetchExistingData() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/get_data');\n        if (response.ok) {\n          this.existingData = await response.json();\n        } else {\n          console.error('Failed to fetch existing data:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  },\n  mounted() {\n    // Fetch and display existing data on page load\n    this.fetchExistingData();\n  }\n};","map":{"version":3,"names":["data","formData","name","email","password","existingData","methods","submitForm","response","fetch","method","headers","body","JSON","stringify","responseData","json","alert","message","fetchExistingData","error","console","ok","statusText","mounted"],"sources":["/home/waseem/experiments/waseem-example-fullstack/client-/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>User Data Form</h1>\n    <form @submit.prevent=\"submitForm\">\n      <label for=\"name\">Name:</label>\n      <input type=\"text\" id=\"name\" v-model=\"formData.name\" required>\n      <label for=\"email\">Email:</label>\n      <input type=\"email\" id=\"email\" v-model=\"formData.email\" required>\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" v-model=\"formData.password\" required>\n      <button type=\"submit\">Submit</button>\n    </form>\n    <div id=\"userDataContainer\">\n      <div v-for=\"user in existingData\" :key=\"user.id\">\n        <p><strong>Name:</strong> {{ user.name }}</p>\n        <p><strong>Email:</strong> {{ user.email }}</p>\n        <p><strong>Password:</strong> {{ user.password }}</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      formData: {\n        name: '',\n        email: '',\n        password: ''\n      },\n      existingData: []\n    };\n  },\n  methods: {\n    async submitForm() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/save', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(this.formData)\n        });\n        const responseData = await response.json();\n        alert(responseData.message); // Show response message\n\n        // Clear form fields after submission\n        this.formData.name = '';\n        this.formData.email = '';\n        this.formData.password = '';\n\n        // Fetch and display existing data\n        this.fetchExistingData();\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    },\n    async fetchExistingData() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/get_data');\n        if (response.ok) {\n          this.existingData = await response.json();\n        } else {\n          console.error('Failed to fetch existing data:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  },\n  mounted() {\n    // Fetch and display existing data on page load\n    this.fetchExistingData();\n  }\n};\n</script>\n\n<style>\n/* Your CSS styles go here */\nbody {\n  font-family: Arial, sans-serif;\n}\nform {\n  margin-bottom: 20px;\n}\nlabel {\n  display: block;\n  margin-bottom: 5px;\n}\ninput[type=\"text\"],\ninput[type=\"email\"],\ninput[type=\"password\"] {\n  width: 250px;\n  padding: 5px;\n  margin-bottom: 10px;\n}\nbutton {\n  padding: 8px 16px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\nbutton:hover {\n  background-color: #45a049;\n}\n</style>\n"],"mappings":"AAuBA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE;QACRC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE;MACZ,CAAC;MACDC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,4BAA4B,EAAE;UACzDC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACb,QAAQ;QACpC,CAAC,CAAC;QACF,MAAMc,YAAW,GAAI,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAC1CC,KAAK,CAACF,YAAY,CAACG,OAAO,CAAC,EAAE;;QAE7B;QACA,IAAI,CAACjB,QAAQ,CAACC,IAAG,GAAI,EAAE;QACvB,IAAI,CAACD,QAAQ,CAACE,KAAI,GAAI,EAAE;QACxB,IAAI,CAACF,QAAQ,CAACG,QAAO,GAAI,EAAE;;QAE3B;QACA,IAAI,CAACe,iBAAiB,CAAC,CAAC;MAC1B,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;IACF,CAAC;IACD,MAAMD,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF,MAAMX,QAAO,GAAI,MAAMC,KAAK,CAAC,gCAAgC,CAAC;QAC9D,IAAID,QAAQ,CAACc,EAAE,EAAE;UACf,IAAI,CAACjB,YAAW,GAAI,MAAMG,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAC3C,OAAO;UACLK,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEZ,QAAQ,CAACe,UAAU,CAAC;QACtE;MACF,EAAE,OAAOH,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;IACF;EACF,CAAC;EACDI,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACL,iBAAiB,CAAC,CAAC;EAC1B;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}