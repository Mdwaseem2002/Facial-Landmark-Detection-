{"ast":null,"code":"export default {\n  data() {\n    return {\n      imageUrl: '',\n      results: null\n    };\n  },\n  methods: {\n    handleImageUpload(event) {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.imageUrl = reader.result;\n      };\n      reader.readAsDataURL(file);\n    },\n    submitImage() {\n      if (!this.imageUrl) {\n        alert('Please select an image.');\n        return;\n      }\n      // Replace 'YOUR_BACKEND_API_URL' with the URL where your Flask server is running\n      fetch('http://localhost:5000/process_image', {\n        method: 'POST',\n        body: JSON.stringify({\n          image: this.imageUrl\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).then(data => {\n        this.results = data;\n      }).catch(error => {\n        console.error('Error:', error);\n        alert('An error occurred while processing the image.');\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","imageUrl","results","methods","handleImageUpload","event","file","target","files","reader","FileReader","onload","result","readAsDataURL","submitImage","alert","fetch","method","body","JSON","stringify","image","headers","then","response","json","catch","error","console"],"sources":["/home/waseem/experiments/waseem-example-fullstack/client-/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <h1>Facial Landmark Detection</h1>\n    <div class=\"image-upload-form\">\n      <input type=\"file\" @change=\"handleImageUpload\" accept=\"image/*\">\n      <button @click=\"submitImage\">Submit</button>\n      <img v-if=\"imageUrl\" :src=\"imageUrl\" alt=\"Uploaded Image\">\n    </div>\n    <div class=\"results-display\">\n      <h2>Analysis Results</h2>\n      <div v-if=\"results\">\n        <pre>{{ results }}</pre>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      imageUrl: '',\n      results: null\n    };\n  },\n  methods: {\n    handleImageUpload(event) {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.imageUrl = reader.result;\n      };\n      reader.readAsDataURL(file);\n    },\n    submitImage() {\n      if (!this.imageUrl) {\n        alert('Please select an image.');\n        return;\n      }\n      // Replace 'YOUR_BACKEND_API_URL' with the URL where your Flask server is running\n      fetch('http://localhost:5000/process_image', {\n        method: 'POST',\n        body: JSON.stringify({ image: this.imageUrl }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      .then(response => response.json())\n      .then(data => {\n        this.results = data;\n      })\n      .catch(error => {\n        console.error('Error:', error);\n        alert('An error occurred while processing the image.');\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Add your scoped CSS styles for responsive UI here */\n</style>\n"],"mappings":"AAkBA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,iBAAiBA,CAACC,KAAK,EAAE;MACvB,MAAMC,IAAG,GAAID,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC,MAAMC,MAAK,GAAI,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAK,GAAI,MAAM;QACpB,IAAI,CAACV,QAAO,GAAIQ,MAAM,CAACG,MAAM;MAC/B,CAAC;MACDH,MAAM,CAACI,aAAa,CAACP,IAAI,CAAC;IAC5B,CAAC;IACDQ,WAAWA,CAAA,EAAG;MACZ,IAAI,CAAC,IAAI,CAACb,QAAQ,EAAE;QAClBc,KAAK,CAAC,yBAAyB,CAAC;QAChC;MACF;MACA;MACAC,KAAK,CAAC,qCAAqC,EAAE;QAC3CC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,KAAK,EAAE,IAAI,CAACpB;QAAS,CAAC,CAAC;QAC9CqB,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,EACAC,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAChCF,IAAI,CAACvB,IAAG,IAAK;QACZ,IAAI,CAACE,OAAM,GAAIF,IAAI;MACrB,CAAC,EACA0B,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9BZ,KAAK,CAAC,+CAA+C,CAAC;MACxD,CAAC,CAAC;IACJ;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}