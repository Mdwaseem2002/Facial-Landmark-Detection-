{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport HelloWorld from './App.vue'; // Import HelloWorld.vue\n\nexport default {\n  components: {\n    HelloWorld // Register HelloWorld component\n  },\n  data() {\n    return {\n      status: null,\n      result: null,\n      imageFile: null\n    };\n  },\n  computed: {\n    imageFileURL() {\n      return URL.createObjectURL(this.imageFile);\n    }\n  },\n  methods: {\n    handleImageUpload(event) {\n      this.status = null;\n      this.result = null;\n      const input = event.target;\n      this.imageFile = input.files[0];\n    },\n    async uploadImage() {\n      if (!this.imageFile) {\n        this.status = \"Please select an image file.\";\n        return;\n      }\n      const formData = new FormData();\n      formData.append(\"image\", this.imageFile);\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/\", {\n          method: \"POST\",\n          body: formData\n        });\n        if (response.ok) {\n          this.status = \"Image upload successful!\";\n        } else {\n          this.status = \"Image upload failed. Please try again.\";\n        }\n      } catch (error) {\n        console.error(\"Error uploading image:\", error);\n        this.status = \"Image upload failed. Please try again.\";\n      }\n    },\n    async getResult() {\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/ \", {\n          method: \"GET\"\n        });\n        if (response.ok) {\n          const blob = await response.blob();\n          this.result = URL.createObjectURL(blob);\n          this.drawLandmarks(); // Assuming you have a method to draw landmarks\n        } else {\n          console.error(\"Failed to get result from the server.\");\n        }\n      } catch (error) {\n        console.error(\"Error getting result:\", error);\n      }\n    },\n    drawLandmarks() {\n      // Add code to draw facial landmarks on the canvas if needed\n    }\n  }\n};","map":{"version":3,"names":["HelloWorld","components","data","status","result","imageFile","computed","imageFileURL","URL","createObjectURL","methods","handleImageUpload","event","input","target","files","uploadImage","formData","FormData","append","response","fetch","method","body","ok","error","console","getResult","blob","drawLandmarks"],"sources":["/home/waseem/experiments/waseem-example-fullstack/client-/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"facial-landmark-detection\">\n    <header>\n      <h1>Facial Landmark Detection</h1>\n    </header>\n\n    <main>\n      <!-- HelloWorld component at the top -->\n      <HelloWorld />\n\n      <!-- Green layer with white background -->\n      <div class=\"green-layer\">\n        <table>\n          <tr>\n            <td>\n              <!-- Rectangle box to display the image -->\n              <div class=\"image-box\">\n                <img v-if=\"imageFile\" :src=\"imageFileURL\" alt=\"Uploaded Image\" />\n              </div>\n              <input type=\"file\" accept=\".jpg\" @change=\"handleImageUpload\" />\n            </td>\n            <td>\n              <button @click=\"uploadImage\">Upload</button>\n              <button @click=\"getResult\">Get Result</button> <!-- Button to get the result -->\n            </td>\n          </tr>\n        </table>\n\n        <div v-if=\"status !== null\" class=\"status\">\n          {{ status }}\n        </div>\n\n        <canvas v-if=\"result\" ref=\"outputCanvas\" width=\"600\" height=\"400\"></canvas>\n      </div>\n    </main>\n\n    <footer>\n      <p>&copy; 2024 Facial Landmark Detection</p>\n    </footer>\n  </div>\n</template>\n\n<script>\nimport HelloWorld from './App.vue'; // Import HelloWorld.vue\n\nexport default {\n  components: {\n    HelloWorld, // Register HelloWorld component\n  },\n  data() {\n    return {\n      status: null,\n      result: null,\n      imageFile: null,\n    };\n  },\n  computed: {\n    imageFileURL() {\n      return URL.createObjectURL(this.imageFile);\n    },\n  },\n  methods: {\n    handleImageUpload(event) {\n      this.status = null;\n      this.result = null;\n      const input = event.target;\n      this.imageFile = input.files[0];\n    },\n    async uploadImage() {\n      if (!this.imageFile) {\n        this.status = \"Please select an image file.\";\n        return;\n      }\n\n      const formData = new FormData();\n      formData.append(\"image\", this.imageFile);\n\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/\", {\n          method: \"POST\",\n          body: formData,\n        });\n        if (response.ok) {\n          this.status = \"Image upload successful!\";\n        } else {\n          this.status = \"Image upload failed. Please try again.\";\n        }\n      } catch (error) {\n        console.error(\"Error uploading image:\", error);\n        this.status = \"Image upload failed. Please try again.\";\n      }\n    },\n    async getResult() {\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/ \", {\n          method: \"GET\",\n        });\n        if (response.ok) {\n          const blob = await response.blob();\n          this.result = URL.createObjectURL(blob);\n          this.drawLandmarks(); // Assuming you have a method to draw landmarks\n        } else {\n          console.error(\"Failed to get result from the server.\");\n        }\n      } catch (error) {\n        console.error(\"Error getting result:\", error);\n      }\n    },\n    drawLandmarks() {\n      // Add code to draw facial landmarks on the canvas if needed\n    },\n  },\n};\n</script>\n\n<style>\n/* Add your CSS styling here */\nheader {\n  background-color: #333;\n  color: #fff;\n  text-align: center;\n  padding: 10px;\n}\n\nfooter {\n  background-color: #333;\n  color: #fff;\n  text-align: center;\n  padding: 10px;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n}\n\nmain {\n  margin: 20px;\n}\n\ntable {\n  margin-bottom: 20px;\n}\n\n/* Green layer with white background */\n.green-layer {\n  background-color: white;\n  padding: 20px;\n  border: 2px solid green;\n  border-radius: 10px;\n}\n\n/* Rectangle box to display the image */\n.image-box {\n  border: 2px solid #ccc;\n  padding: 10px;\n  margin-bottom: 10px;\n}\n\n.status {\n  margin-top: 10px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  background-color: #f0f0f0;\n}\n</style>\n"],"mappings":";;;AA2CA,OAAOA,UAAS,MAAO,WAAW,EAAE;;AAEpC,eAAe;EACbC,UAAU,EAAE;IACVD,UAAU,CAAE;EACd,CAAC;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,IAAI;MACZC,MAAM,EAAE,IAAI;MACZC,SAAS,EAAE;IACb,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,YAAYA,CAAA,EAAG;MACb,OAAOC,GAAG,CAACC,eAAe,CAAC,IAAI,CAACJ,SAAS,CAAC;IAC5C;EACF,CAAC;EACDK,OAAO,EAAE;IACPC,iBAAiBA,CAACC,KAAK,EAAE;MACvB,IAAI,CAACT,MAAK,GAAI,IAAI;MAClB,IAAI,CAACC,MAAK,GAAI,IAAI;MAClB,MAAMS,KAAI,GAAID,KAAK,CAACE,MAAM;MAC1B,IAAI,CAACT,SAAQ,GAAIQ,KAAK,CAACE,KAAK,CAAC,CAAC,CAAC;IACjC,CAAC;IACD,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI,CAAC,IAAI,CAACX,SAAS,EAAE;QACnB,IAAI,CAACF,MAAK,GAAI,8BAA8B;QAC5C;MACF;MAEA,MAAMc,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACd,SAAS,CAAC;MAExC,IAAI;QACF,MAAMe,QAAO,GAAI,MAAMC,KAAK,CAAC,wBAAwB,EAAE;UACrDC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEN;QACR,CAAC,CAAC;QACF,IAAIG,QAAQ,CAACI,EAAE,EAAE;UACf,IAAI,CAACrB,MAAK,GAAI,0BAA0B;QAC1C,OAAO;UACL,IAAI,CAACA,MAAK,GAAI,wCAAwC;QACxD;MACF,EAAE,OAAOsB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C,IAAI,CAACtB,MAAK,GAAI,wCAAwC;MACxD;IACF,CAAC;IACD,MAAMwB,SAASA,CAAA,EAAG;MAChB,IAAI;QACF,MAAMP,QAAO,GAAI,MAAMC,KAAK,CAAC,yBAAyB,EAAE;UACtDC,MAAM,EAAE;QACV,CAAC,CAAC;QACF,IAAIF,QAAQ,CAACI,EAAE,EAAE;UACf,MAAMI,IAAG,GAAI,MAAMR,QAAQ,CAACQ,IAAI,CAAC,CAAC;UAClC,IAAI,CAACxB,MAAK,GAAII,GAAG,CAACC,eAAe,CAACmB,IAAI,CAAC;UACvC,IAAI,CAACC,aAAa,CAAC,CAAC,EAAE;QACxB,OAAO;UACLH,OAAO,CAACD,KAAK,CAAC,uCAAuC,CAAC;QACxD;MACF,EAAE,OAAOA,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IACDI,aAAaA,CAAA,EAAG;MACd;IAAA;EAEJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}