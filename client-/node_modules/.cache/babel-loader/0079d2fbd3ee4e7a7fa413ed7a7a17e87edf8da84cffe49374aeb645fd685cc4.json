{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport HelloWorld from './App.vue'; // Import HelloWorld.vue\n\nexport default {\n  components: {\n    HelloWorld // Register HelloWorld component\n  },\n  data() {\n    return {\n      status: null,\n      uploadedImage: null,\n      result: null,\n      resultVisible: false,\n      // Added a flag to control result visibility\n      imageFile: null\n    };\n  },\n  methods: {\n    handleImageUpload(event) {\n      this.status = null;\n      this.uploadedImage = null;\n      this.result = null;\n      this.resultVisible = false;\n      const input = event.target;\n      this.imageFile = input.files[0];\n    },\n    async uploadImage() {\n      if (!this.imageFile) {\n        this.status = \"Please select an image file.\";\n        return;\n      }\n      const formData = new FormData();\n      formData.append(\"image\", this.imageFile);\n      try {\n        const uploadResponse = await fetch(\"http://127.0.0.1:5000/\", {\n          method: \"POST\",\n          body: formData\n        });\n        if (uploadResponse.ok) {\n          this.status = \"Image upload successful!\";\n          // Automatically fetch result after successful upload if resultVisible is true\n          if (this.resultVisible) {\n            await this.fetchResultImage();\n          }\n        } else {\n          this.status = \"Image upload failed. Please try again.\";\n        }\n      } catch (error) {\n        console.error(\"Error uploading image:\", error);\n        this.status = \"Image upload failed. Please try again.\";\n      }\n    },\n    async fetchResultImage() {\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/\");\n        if (response.ok) {\n          const resultImageData = await response.blob();\n          this.result = URL.createObjectURL(resultImageData);\n          this.drawLandmarks();\n          // Set resultVisible to true to display the result\n          this.resultVisible = true;\n        } else {\n          this.status = \"Error fetching result image.\";\n        }\n      } catch (error) {\n        console.error(\"Error fetching result image:\", error);\n        this.status = \"Error fetching result image. Please try again.\";\n      }\n    },\n    drawLandmarks() {\n      // Add code to draw facial landmarks on the canvas if needed\n    }\n  }\n};","map":{"version":3,"names":["HelloWorld","components","data","status","uploadedImage","result","resultVisible","imageFile","methods","handleImageUpload","event","input","target","files","uploadImage","formData","FormData","append","uploadResponse","fetch","method","body","ok","fetchResultImage","error","console","response","resultImageData","blob","URL","createObjectURL","drawLandmarks"],"sources":["/home/waseem/experiments/waseem-example-fullstack/client-/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"facial-landmark-detection\">\n    <header>\n      <h1>Facial Landmark Detection</h1>\n    </header>\n\n    <main>\n      <table>\n        <tr>\n          <td>\n            <!-- Updated file input with a shorter box -->\n            <label class=\"file-input-label\">\n              <input type=\"file\" accept=\".jpg\" @change=\"handleImageUpload\" />\n              Choose File\n            </label>\n          </td>\n          <td>\n            <button @click=\"uploadImage\">Upload</button>\n          </td>\n          <td>\n            <!-- Updated fetchResultImage function to display result only when clicked -->\n            <button @click=\"fetchResultImage\" :disabled=\"!result\">\n              Fetch Result\n            </button>\n          </td>\n        </tr>\n      </table>\n\n      <!-- Display the chosen file name -->\n      <div v-if=\"imageFile\" class=\"chosen-file\">\n        Chosen File: {{ imageFile.name }}\n      </div>\n\n      <!-- Box space to display the selected image -->\n      <div v-if=\"uploadedImage\" class=\"image-box\">\n        <h2>Selected Image</h2>\n        <img :src=\"uploadedImage\" alt=\"Selected Image\" />\n      </div>\n\n      <div v-if=\"status !== null\" class=\"status\">\n        {{ status }}\n      </div>\n\n      <canvas v-if=\"result && resultVisible\" ref=\"outputCanvas\" width=\"600\" height=\"400\"></canvas>\n\n      <div v-if=\"result && resultVisible\" class=\"result-image-container\">\n        <h2>Result Image</h2>\n        <img :src=\"result\" alt=\"Result Image\" />\n      </div>\n\n      <!-- Include HelloWorld.vue component -->\n      <HelloWorld />\n    </main>\n\n    <footer>\n      <p>&copy; 2024 Facial Landmark Detection</p>\n    </footer>\n  </div>\n</template>\n\n<script>\nimport HelloWorld from './App.vue'; // Import HelloWorld.vue\n\nexport default {\n  components: {\n    HelloWorld, // Register HelloWorld component\n  },\n  data() {\n    return {\n      status: null,\n      uploadedImage: null,\n      result: null,\n      resultVisible: false, // Added a flag to control result visibility\n      imageFile: null,\n    };\n  },\n  methods: {\n    handleImageUpload(event) {\n      this.status = null;\n      this.uploadedImage = null;\n      this.result = null;\n      this.resultVisible = false;\n      const input = event.target;\n      this.imageFile = input.files[0];\n    },\n    async uploadImage() {\n      if (!this.imageFile) {\n        this.status = \"Please select an image file.\";\n        return;\n      }\n\n      const formData = new FormData();\n      formData.append(\"image\", this.imageFile);\n\n      try {\n        const uploadResponse = await fetch(\"http://127.0.0.1:5000/\", {\n          method: \"POST\",\n          body: formData,\n        });\n\n        if (uploadResponse.ok) {\n          this.status = \"Image upload successful!\";\n          // Automatically fetch result after successful upload if resultVisible is true\n          if (this.resultVisible) {\n            await this.fetchResultImage();\n          }\n        } else {\n          this.status = \"Image upload failed. Please try again.\";\n        }\n      } catch (error) {\n        console.error(\"Error uploading image:\", error);\n        this.status = \"Image upload failed. Please try again.\";\n      }\n    },\n    async fetchResultImage() {\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/\");\n        if (response.ok) {\n          const resultImageData = await response.blob();\n          this.result = URL.createObjectURL(resultImageData);\n          this.drawLandmarks();\n          // Set resultVisible to true to display the result\n          this.resultVisible = true;\n        } else {\n          this.status = \"Error fetching result image.\";\n        }\n      } catch (error) {\n        console.error(\"Error fetching result image:\", error);\n        this.status = \"Error fetching result image. Please try again.\";\n      }\n    },\n    drawLandmarks() {\n      // Add code to draw facial landmarks on the canvas if needed\n    },\n  },\n};\n</script>\n\n<style>\n/* Add your CSS styling here */\nheader {\n  background-color: #333;\n  color: #fff;\n  text-align: center;\n  padding: 10px;\n}\nfooter {\n  background-color: #333;\n  color: #fff;\n  text-align: center;\n  padding: 10px;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n}\n\nmain {\n  margin: 20px;\n}\n\ntable {\n  margin-bottom: 20px;\n}\n\n/* Style for the file input label */\n.file-input-label {\n  display: inline-block;\n  padding: 10px;\n  border: 1px solid #ccc;\n  cursor: pointer;\n}\n\n/* Style for the chosen file box */\n.chosen-file {\n  margin-top: 10px;\n  padding: 10px;\n  border: 1px solid #ccc;\n}\n\n/* Style for the image box */\n.image-box {\n  margin-top: 20px;\n  padding: 10px;\n  border: 1px solid #ccc;\n}\n\n.image-box h2 {\n  text-align: center;\n}\n\n.image-box img {\n  max-width: 100%;\n  height: auto;\n}\n\n.status {\n  margin-top: 10px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  background-color: #f0f0f0;\n}\n\n.result-image-container {\n  margin-top: 20px;\n}\n\n.result-image-container h2 {\n  text-align: center;\n}\n\n.result-image-container img {\n  max-width: 100%;\n  height: auto;\n}\n</style>"],"mappings":";;;AA6DA,OAAOA,UAAS,MAAO,WAAW,EAAE;;AAEpC,eAAe;EACbC,UAAU,EAAE;IACVD,UAAU,CAAE;EACd,CAAC;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,IAAI;MACZC,aAAa,EAAE,IAAI;MACnBC,MAAM,EAAE,IAAI;MACZC,aAAa,EAAE,KAAK;MAAE;MACtBC,SAAS,EAAE;IACb,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,iBAAiBA,CAACC,KAAK,EAAE;MACvB,IAAI,CAACP,MAAK,GAAI,IAAI;MAClB,IAAI,CAACC,aAAY,GAAI,IAAI;MACzB,IAAI,CAACC,MAAK,GAAI,IAAI;MAClB,IAAI,CAACC,aAAY,GAAI,KAAK;MAC1B,MAAMK,KAAI,GAAID,KAAK,CAACE,MAAM;MAC1B,IAAI,CAACL,SAAQ,GAAII,KAAK,CAACE,KAAK,CAAC,CAAC,CAAC;IACjC,CAAC;IACD,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI,CAAC,IAAI,CAACP,SAAS,EAAE;QACnB,IAAI,CAACJ,MAAK,GAAI,8BAA8B;QAC5C;MACF;MAEA,MAAMY,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACV,SAAS,CAAC;MAExC,IAAI;QACF,MAAMW,cAAa,GAAI,MAAMC,KAAK,CAAC,wBAAwB,EAAE;UAC3DC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEN;QACR,CAAC,CAAC;QAEF,IAAIG,cAAc,CAACI,EAAE,EAAE;UACrB,IAAI,CAACnB,MAAK,GAAI,0BAA0B;UACxC;UACA,IAAI,IAAI,CAACG,aAAa,EAAE;YACtB,MAAM,IAAI,CAACiB,gBAAgB,CAAC,CAAC;UAC/B;QACF,OAAO;UACL,IAAI,CAACpB,MAAK,GAAI,wCAAwC;QACxD;MACF,EAAE,OAAOqB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C,IAAI,CAACrB,MAAK,GAAI,wCAAwC;MACxD;IACF,CAAC;IACD,MAAMoB,gBAAgBA,CAAA,EAAG;MACvB,IAAI;QACF,MAAMG,QAAO,GAAI,MAAMP,KAAK,CAAC,wBAAwB,CAAC;QACtD,IAAIO,QAAQ,CAACJ,EAAE,EAAE;UACf,MAAMK,eAAc,GAAI,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;UAC7C,IAAI,CAACvB,MAAK,GAAIwB,GAAG,CAACC,eAAe,CAACH,eAAe,CAAC;UAClD,IAAI,CAACI,aAAa,CAAC,CAAC;UACpB;UACA,IAAI,CAACzB,aAAY,GAAI,IAAI;QAC3B,OAAO;UACL,IAAI,CAACH,MAAK,GAAI,8BAA8B;QAC9C;MACF,EAAE,OAAOqB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpD,IAAI,CAACrB,MAAK,GAAI,gDAAgD;MAChE;IACF,CAAC;IACD4B,aAAaA,CAAA,EAAG;MACd;IAAA;EAEJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}